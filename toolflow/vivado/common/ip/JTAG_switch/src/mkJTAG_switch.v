//
// Generated by Bluespec Compiler (build e76ca21)
//
// On Fri Jul 17 10:30:39 CEST 2020
//
//
// Ports:
// Name                         I/O  size props
// jtag_slave_TDO                 O     1
// jtag_master_0_TCK              O     1
// jtag_master_0_TMS              O     1
// jtag_master_0_TDI              O     1
// jtag_master_1_TCK              O     1
// jtag_master_1_TMS              O     1
// jtag_master_1_TDI              O     1
// jtag_master_2_TCK              O     1
// jtag_master_2_TMS              O     1
// jtag_master_2_TDI              O     1
// jtag_master_3_TCK              O     1 const
// jtag_master_3_TMS              O     1 const
// jtag_master_3_TDI              O     1 const
// ACLK                           I     1 clock
// ARESETN                        I     1 reset
// slave_select                   I     2 reg
// jtag_slave_TCK                 I     1
// jtag_slave_TMS                 I     1
// jtag_slave_TDI                 I     1
// jtag_master_0_TDO              I     1
// jtag_master_1_TDO              I     1
// jtag_master_2_TDO              I     1
// jtag_master_3_TDO              I     1
//
// Combinational paths from inputs to outputs:
//   (jtag_master_0_TDO, jtag_master_1_TDO, jtag_master_2_TDO) -> jtag_slave_TDO
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkJTAG_switch(ACLK,
		     ARESETN,

		     slave_select,

		     jtag_slave_TCK,

		     jtag_slave_TMS,

		     jtag_slave_TDI,

		     jtag_slave_TDO,

		     jtag_master_0_TCK,

		     jtag_master_0_TMS,

		     jtag_master_0_TDI,

		     jtag_master_0_TDO,

		     jtag_master_1_TCK,

		     jtag_master_1_TMS,

		     jtag_master_1_TDI,

		     jtag_master_1_TDO,

		     jtag_master_2_TCK,

		     jtag_master_2_TMS,

		     jtag_master_2_TDI,

		     jtag_master_2_TDO,

		     jtag_master_3_TCK,

		     jtag_master_3_TMS,

		     jtag_master_3_TDI,

		     jtag_master_3_TDO);
  parameter [1 : 0] jtag_master = 2'b0;
  input  ACLK;
  input  ARESETN;

  // action method slave_select_action
  input  [1 : 0] slave_select;

  // action method jtag_slave_tck_action
  input  jtag_slave_TCK;

  // action method jtag_slave_tms_action
  input  jtag_slave_TMS;

  // action method jtag_slave_tdi_action
  input  jtag_slave_TDI;

  // value method jtag_slave_tdo
  output jtag_slave_TDO;

  // value method jtag_master_0_tck
  output jtag_master_0_TCK;

  // value method jtag_master_0_tms
  output jtag_master_0_TMS;

  // value method jtag_master_0_tdi
  output jtag_master_0_TDI;

  // action method jtag_master_0_tdo_action
  input  jtag_master_0_TDO;

  // value method jtag_master_1_tck
  output jtag_master_1_TCK;

  // value method jtag_master_1_tms
  output jtag_master_1_TMS;

  // value method jtag_master_1_tdi
  output jtag_master_1_TDI;

  // action method jtag_master_1_tdo_action
  input  jtag_master_1_TDO;

  // value method jtag_master_2_tck
  output jtag_master_2_TCK;

  // value method jtag_master_2_tms
  output jtag_master_2_TMS;

  // value method jtag_master_2_tdi
  output jtag_master_2_TDI;

  // action method jtag_master_2_tdo_action
  input  jtag_master_2_TDO;

  // value method jtag_master_3_tck
  output jtag_master_3_TCK;

  // value method jtag_master_3_tms
  output jtag_master_3_TMS;

  // value method jtag_master_3_tdi
  output jtag_master_3_TDI;

  // action method jtag_master_3_tdo_action
  input  jtag_master_3_TDO;

  // signals for module outputs
  reg jtag_slave_TDO;
  wire jtag_master_0_TCK,
       jtag_master_0_TDI,
       jtag_master_0_TMS,
       jtag_master_1_TCK,
       jtag_master_1_TDI,
       jtag_master_1_TMS,
       jtag_master_2_TCK,
       jtag_master_2_TDI,
       jtag_master_2_TMS,
       jtag_master_3_TCK,
       jtag_master_3_TDI,
       jtag_master_3_TMS;

  // register internal_n_rst
  reg internal_n_rst;
  wire internal_n_rst$D_IN, internal_n_rst$EN;

  // register internal_slave_select
  reg [1 : 0] internal_slave_select;
  wire [1 : 0] internal_slave_select$D_IN;
  wire internal_slave_select$EN;

  // register internal_tck
  reg internal_tck;
  wire internal_tck$D_IN, internal_tck$EN;

  // register internal_tdi
  reg internal_tdi;
  wire internal_tdi$D_IN, internal_tdi$EN;

  // register internal_tdo_0
  reg internal_tdo_0;
  wire internal_tdo_0$D_IN, internal_tdo_0$EN;

  // register internal_tdo_1
  reg internal_tdo_1;
  wire internal_tdo_1$D_IN, internal_tdo_1$EN;

  // register internal_tdo_2
  reg internal_tdo_2;
  wire internal_tdo_2$D_IN, internal_tdo_2$EN;

  // register internal_tdo_3
  reg internal_tdo_3;
  wire internal_tdo_3$D_IN, internal_tdo_3$EN;

  // register internal_tms
  reg internal_tms;
  wire internal_tms$D_IN, internal_tms$EN;

  // value method jtag_slave_tdo
  always@(internal_slave_select or
	  jtag_master or
	  jtag_master_2_TDO or jtag_master_0_TDO or jtag_master_1_TDO)
  begin
    case (internal_slave_select)
      2'd0: jtag_slave_TDO = jtag_master_0_TDO;
      2'd1: jtag_slave_TDO = jtag_master_1_TDO;
      default: jtag_slave_TDO =
		   internal_slave_select == 2'd2 && jtag_master == 2'd3 &&
		   jtag_master_2_TDO;
    endcase
  end

  // value method jtag_master_0_tck
  assign jtag_master_0_TCK = internal_slave_select != 2'd0 || internal_tck ;

  // value method jtag_master_0_tms
  assign jtag_master_0_TMS = internal_slave_select != 2'd0 || internal_tms ;

  // value method jtag_master_0_tdi
  assign jtag_master_0_TDI = internal_slave_select == 2'd0 && internal_tdi ;

  // value method jtag_master_1_tck
  assign jtag_master_1_TCK = internal_slave_select != 2'd1 || internal_tck ;

  // value method jtag_master_1_tms
  assign jtag_master_1_TMS = internal_slave_select != 2'd1 || internal_tms ;

  // value method jtag_master_1_tdi
  assign jtag_master_1_TDI = internal_slave_select == 2'd1 && internal_tdi ;

  // value method jtag_master_2_tck
  assign jtag_master_2_TCK =
	     jtag_master == 2'd3 &&
	     (internal_slave_select != 2'd2 || internal_tck) ;

  // value method jtag_master_2_tms
  assign jtag_master_2_TMS =
	     jtag_master == 2'd3 &&
	     (internal_slave_select != 2'd2 || internal_tms) ;

  // value method jtag_master_2_tdi
  assign jtag_master_2_TDI =
	     jtag_master == 2'd3 && internal_slave_select == 2'd2 &&
	     internal_tdi ;

  // value method jtag_master_3_tck
  assign jtag_master_3_TCK = 1'd0 ;

  // value method jtag_master_3_tms
  assign jtag_master_3_TMS = 1'd0 ;

  // value method jtag_master_3_tdi
  assign jtag_master_3_TDI = 1'd0 ;

  // register internal_n_rst
  assign internal_n_rst$D_IN = internal_n_rst ;
  assign internal_n_rst$EN = 1'b1 ;

  // register internal_slave_select
  assign internal_slave_select$D_IN = slave_select ;
  assign internal_slave_select$EN = 1'd1 ;

  // register internal_tck
  assign internal_tck$D_IN = jtag_slave_TCK ;
  assign internal_tck$EN = 1'b1 ;

  // register internal_tdi
  assign internal_tdi$D_IN = jtag_slave_TDI ;
  assign internal_tdi$EN = 1'b1 ;

  // register internal_tdo_0
  assign internal_tdo_0$D_IN = jtag_master_0_TDO ;
  assign internal_tdo_0$EN = 1'b1 ;

  // register internal_tdo_1
  assign internal_tdo_1$D_IN = jtag_master_1_TDO ;
  assign internal_tdo_1$EN = 1'b1 ;

  // register internal_tdo_2
  assign internal_tdo_2$D_IN = jtag_master_2_TDO ;
  assign internal_tdo_2$EN = 1'b1 ;

  // register internal_tdo_3
  assign internal_tdo_3$D_IN = jtag_master_3_TDO ;
  assign internal_tdo_3$EN = 1'b1 ;

  // register internal_tms
  assign internal_tms$D_IN = jtag_slave_TMS ;
  assign internal_tms$EN = 1'b1 ;

  // handling of inlined registers

  always@(posedge ACLK)
  begin
    if (ARESETN == `BSV_RESET_VALUE)
      begin
        internal_n_rst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	internal_slave_select <= `BSV_ASSIGNMENT_DELAY 2'd0;
	internal_tck <= `BSV_ASSIGNMENT_DELAY 1'd0;
	internal_tdi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	internal_tdo_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	internal_tdo_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	internal_tdo_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	internal_tdo_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	internal_tms <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (internal_n_rst$EN)
	  internal_n_rst <= `BSV_ASSIGNMENT_DELAY internal_n_rst$D_IN;
	if (internal_slave_select$EN)
	  internal_slave_select <= `BSV_ASSIGNMENT_DELAY
	      internal_slave_select$D_IN;
	if (internal_tck$EN)
	  internal_tck <= `BSV_ASSIGNMENT_DELAY internal_tck$D_IN;
	if (internal_tdi$EN)
	  internal_tdi <= `BSV_ASSIGNMENT_DELAY internal_tdi$D_IN;
	if (internal_tdo_0$EN)
	  internal_tdo_0 <= `BSV_ASSIGNMENT_DELAY internal_tdo_0$D_IN;
	if (internal_tdo_1$EN)
	  internal_tdo_1 <= `BSV_ASSIGNMENT_DELAY internal_tdo_1$D_IN;
	if (internal_tdo_2$EN)
	  internal_tdo_2 <= `BSV_ASSIGNMENT_DELAY internal_tdo_2$D_IN;
	if (internal_tdo_3$EN)
	  internal_tdo_3 <= `BSV_ASSIGNMENT_DELAY internal_tdo_3$D_IN;
	if (internal_tms$EN)
	  internal_tms <= `BSV_ASSIGNMENT_DELAY internal_tms$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    internal_n_rst = 1'h0;
    internal_slave_select = 2'h2;
    internal_tck = 1'h0;
    internal_tdi = 1'h0;
    internal_tdo_0 = 1'h0;
    internal_tdo_1 = 1'h0;
    internal_tdo_2 = 1'h0;
    internal_tdo_3 = 1'h0;
    internal_tms = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkJTAG_switch

